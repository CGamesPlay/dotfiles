#!/usr/bin/env bash
# @describe A remote environment.
set -eu
# shellcheck shell=bash
# shellcheck disable=SC1090
. "$ATENV_HELPER_LIB"

HBV_NAME=${HBV_NAME:?}
HBV_SSH_PORT=${HBV_SSH_PORT:?}

# @cmd Start the environment
up() {
	RUST_LOG=qtm=trace qtm daemon --background --log-to-file=/Users/rpatterson/Projects/qtm/qtm/logs/qtm.log 2>/dev/null || true
	hetzner-bootable-volume boot "$HBV_NAME" --firewall=ssh-only
	if ! run-in-env true 2>/dev/null; then
		qtm --no-auto-start remove-peer "$HBV_NAME"
		qtm --no-auto-start add "$HBV_NAME" \
			--helper ssh \
			-L "$HBV_SSH_PORT:22#ssh" \
			${HBV_TUNNELS+"${HBV_TUNNELS[@]}"}
		sleep 1 # Wait for service to be accepted
	fi
	run-in-env "cat /run/motd.dynamic"
}

# @cmd Execute a command in the environment
# @arg command! Command to run
run-in-env() {
	set +e
	# Connect over QTM tunnel, disable idle timeout
	ssh "$HBV_NAME" -o Hostname=localhost -o ServerAliveInterval=0 -p "$HBV_SSH_PORT" "$1"; status=$?
	set -e
	return $status
}

# @cmd Upgrade qtm
upgrade-qtm() {
	ssh "$HBV_NAME" 'curl "https://gitlab.com/CGamesPlay/qtm/-/raw/main/share/qtm-install-latest.sh" | sh'
}

# @cmd Show server status
status() {
	hcloud server describe "$HBV_NAME" -o format='{{.Status}}' || true
}

# @cmd Disconnect without stopping the environment
disconnect() {
	qtm remove-peer "$HBV_NAME"
}

# @cmd Shut down the server
# @flag --force  Delete the server via the hcloud
stop() {
	qtm remove-peer "$HBV_NAME"
	if [ ! ${argc_force+1} ]; then
		hcloud server shutdown "$HBV_NAME"
	else
		hcloud server delete "$HBV_NAME"
	fi
}

eval "$(argc --argc-eval "${BASH_SOURCE[0]}" "$@")"
