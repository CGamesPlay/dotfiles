realpath() {
    [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

layout_poetry() {
    if [[ ! -f pyproject.toml ]]; then
        log_error 'No pyproject.toml found.  Use `poetry new` or `poetry init` to create one first.'
        exit 2
    fi

    local VENV=$(dirname $(poetry run which python))
    export VIRTUAL_ENV=$(echo "$VENV" | rev | cut -d'/' -f2- | rev)
    export POETRY_ACTIVE=1
    PATH_add "$VENV"
}

# Usage: layout uv
#
# Requires that the project already has a uv configuration. Creates/activates
# the virtual env.
layout_uv() {
	# I don't think any change to configuration files is actually relevant to
	# the activation of the venv, so we won't bother watching them.
	#watch_file .python-version pyproject.toml uv.lock
	direnv_load uv run --no-sync direnv dump
}

layout_rust() {
    PATH_add ~/.cargo/bin
}

use_nodejs() {
    NODE_VERSION="$1"

    . $NVM_DIR/nvm.sh
    nvm use "$NODE_VERSION"
    PATH_add node_modules/.bin
}

# vi:ft=bash
