#!/usr/bin/env bash
# @describe Useful commands from my dotfiles.

set -eu

dotfiles_root() {
	path=${BASH_SOURCE[0]}
	realpath -m "$path"/../../../..
}

# @cmd Open VSCodium in the current directory.
# @arg       directory=`pwd`       Directory to open
# @flag      --microsoft           Open VSCode instead of VSCodium.
# @env       VSCODE_REMOTE=remote  The name of the Remote-OSS remote to open.
codium() {
	binary=codium
	if [[ ${argc_microsoft:+1} ]]; then
		binary=code
	fi
	product=vs${binary}
	if type -P $binary &>/dev/null; then
		exec command $binary .
	fi
	dir=$(realpath -m "${argc_directory:?}")
	if [ -e /.dockerenv ]; then
		# Inside of docker, assume devcontainer
		if ! [[ "${VSCODE_REMOTE+1}" ]]; then
			echo "There is no \$VSCODE_REMOTE set." >&2
			echo "set -Ux VSCODE_REMOTE myremote" >&2
			exit 1
		fi
		local remote_encoded
		remote_encoded=$(echo -n "${VSCODE_REMOTE}" | xxd -ps)
		url="${product}://vscode-remote/remote-oss+--${remote_encoded}${dir}"
	else
		hostname=$(hostname -s)
		url="${product}://vscode-remote/ssh-remote+${hostname}${dir}"
	fi
	if which xdg-open >/dev/null; then
		xdg-open "$url"
	else
		echo "$url"
	fi
}

# @cmd Start an automatic local vhost for Docker compose containers.
# The traefik container will run permanently. The dashboard will be available
# at the root domain. All docker containers will be made available at URLs
# according to their compose configuration, by default:
#
#     http://SERVICE-PROJECT.lvh.me/
#
# - Docker label reference: https://doc.traefik.io/traefik/providers/docker/
# @option -p --port=80 <PORT>       Local post number to listen on.
# @option -h --host=lvh.me <HOST>   Base hostname to use. All subdomains must resolve to localhost.
traefik() {
	docker rm -f traefik 2>/dev/null
	case $(uname -s) in
		Darwin)
			net_args="-p ${argc_port:?}:${argc_port}"
			;;
		*)
			net_args="--network=host"
	esac
	docker run -d --name traefik --restart=always "$net_args" \
		-v /var/run/docker.sock:/var/run/docker.sock \
		--label "traefik.http.routers.dashboard.rule=Host(\`${argc_host:?}\`)" \
		--label "traefik.http.routers.dashboard.service=api@internal" \
		--label "traefik.http.services.traefik.loadbalancer.server.port=${argc_port}" \
		traefik:v2.10 \
		--global.sendAnonymousUsage=false \
		--entryPoints.web.address=":${argc_port}" \
		--api.dashboard=true \
		--providers.docker.defaultRule='Host(`{{ index .Labels "com.docker.compose.service" }}.{{ index .Labels "com.docker.compose.project" }}.'"$argc_host"'`)' \
		--providers.docker.httpClientTimeout=300
}

# @cmd Open an editor in the dotfiles directory
dotfiles() {
	cd "$(dotfiles_root)"
	if command -v neovide >/dev/null; then
		neovide
	else
		$EDITOR
	fi
}

# @cmd Create a temporary docker container.
# @arg       image=buildpack-deps:jammy  Base image to use
docker-sandbox() {
	container_id=$(docker run -d --rm "${argc_image:?}" sleep infinity)
	docker exec -i "$container_id" sh <<-END_SCRIPT
	apt-get update
	apt-get install -y sudo rsync
	cd ~
	git clone https://gitlab.com/CGamesPlay/dotfiles dotfiles
	cd dotfiles
	./bootstrap.sh
	END_SCRIPT
	status=0
	docker exec -it "$container_id" fish || status=$?
	docker rm -f "$container_id"
	exit "$status"
}

# @cmd Instantiate templates.
create() { :; }

# @cmd Copy the devcontainer workspace root template to the named directory.
# @arg       target!        Location of the new workspace.
# @option -n --name <NAME>  Human-readable name for the workspace.
create::devcontainer() {
	template_dir="$(dotfiles_root)/share/devcontainer"
	argc_name=${argc_name:-$argc_target}
	cp -R "$template_dir" "$argc_target"
	echo "$argc_target: created"
}

# @cmd Create a sample Argcfile.
# @arg       target=Argcfile.sh            Target filename.
create::argcfile() {
	template_file="$(dotfiles_root)/share/Argcfile-template.sh"
	cp -i "$template_file" "$argc_target"
	echo "$argc_target: created"
}

# @cmd Create a CACHEDIR.TAG file in the target directory.
# https://bford.info/cachedir/
# @arg       target=. <DIR>  Target directory.
create::cachedir-tag() {
	echo "Signature: 8a477f597d28d172789f06886806bc55" > "${argc_target:?}"/CACHEDIR.TAG
	echo "${argc_target}/CACHEDIR.TAG: created"
}

pwd() {
	command pwd
}

eval "$(argc --argc-eval "$0" "$@")"
