#!/usr/bin/env bash
# @version 1.0.0
# @describe Manage VSCodium remote extension hosts.
#
# The main entry point to this script is the listen subcommand. Additional
# scripts are provided to customized setups.
#
# This script does not support connection tokens, which means that anyone who
# can access the local port used for listening can assume full permissions
# inside of the remote environment.

# shellcheck disable=SC2154
set -eu

# @cmd Print the version of VSCodium installed locally.
version() {
	# codium -v is unhelpful, it does not print the release number in the
	# output, which is required to find the correct package to download.
	# Instead, we have to locate the product.json file.
	codium_bin=$(readlink "$(which codium)")
	product_json=$(dirname "$codium_bin")/../product.json
	version=$(jq -r '.version' "$product_json")
	release=$(jq -r '.release' "$product_json")
	echo "$version.$release"
}

# @cmd Wrapper around connect that listens on a local port.
#
# The provided command will be executed with the shell command and will receive
# a single argument containing a shell script to run on the remote end. The
# command should forward its stdio channels to the remote shell.
#
# Example: vscodium-server listen "docker exec -i my-container sh -c"
# @arg       command+                      Command to get a shell on the remote machine
# @option    --extra-args*                 Additional arguments to codium-server
# @option    --vscodium-version=`version`  Version to start
# @option    --prefix <DIR>                Install prefix on the remote machine
# @option -P --port=4444                   Port to listen on
# @option    --remote-name=remote          Name of the Remote-OSS remote
# @option    --remote-path=/               Path in the remote to open
# @flag      --use-existing                Assume the server is already running
# @flag      --no-open                     Don't open VSCodium
# @flag   -v --verbose                     Increase logging
listen() {
	url=vscodium://vscode-remote/remote-oss+${argc_remote_name}${argc_remote_path}
	if [[ ! ${argc_use_existing:+1} ]]; then
		argc_detach=1
		eval "${argc_command[*]}" "$(shelljoin "exec sh -c $(shelljoin "$(get-start-script)")")" < /dev/null
	fi
	if [[ ! ${argc_no_open+1} ]]; then
		open "$url"
	fi

	connect_script="$0 connect $(shelljoin "${argc_command[*]}")"

	# shellcheck disable=SC2001
	eval socat TCP-LISTEN:"${argc_port:?}",reuseaddr,fork "$(shelljoin "EXEC:$(echo "$connect_script" | sed 's/[:,!"'\''\\(\[{]/\\&/g')")"
}

# @cmd Handle a single connection to the remote extension host.
#
# The provided command will be executed with the shell command and will receive
# a single argument containing a shell script to run on the remote end. The
# command should forward its stdio channels to the remote shell.
# @arg       command+                      Command to get a shell on the remote machine
# @option    --vscodium-version=`version`  Version to connect to
# @flag   -v --verbose                     Increase logging
connect() {
	argc_use_existing=1
	# shellcheck disable=SC2048
	${argc_command[*]} "$(shelljoin "exec sh -c $(shelljoin "$(get-connect-script)")")"
}

# @cmd Print the script used to install the remote extension host.
#
# @option    --vscodium-version=`version`  Version to install
# @option    --prefix <DIR>                Install prefix on the remote machine
# @flag      -v --verbose                  Increase logging
get-install-script() {
	if [[ ${argc_verbose:+1} ]]; then
		echo 'set -x'
	fi
	cat <<-EOF
	set -eu
	VSCODIUM_VERSION="${argc_vscodium_version}"
	EOF
	if [[ ${argc_prefix:+1} ]]; then
		echo "PREFIX=\"${argc_prefix}\""
	else
		echo "PREFIX=\${XDG_CACHE_HOME:-\"\$HOME/.cache\"}/vscodium-server"
	fi
	cat <<'EOF'
if ! command -v curl >/dev/null || ! command -v socat >/dev/null; then
	echo 'vscodium-server requires dependencies: curl socat' >&2
	exit 1
fi
mkdir -p "$PREFIX/$VSCODIUM_VERSION"
if [ ! -x "$PREFIX/$VSCODIUM_VERSION/bin/codium-server" ]; then
	case $(uname -m) in
		x86_64) arch=linux-x64 ;;
		aarch64) arch=linux-arm64 ;;
		*)
			echo "Unknown architecture: $(uname -m)" >&2
			exit 1
			;;
	esac
	package="vscodium-reh-$arch-$VSCODIUM_VERSION.tar.gz"
	curl -fsSL "https://github.com/VSCodium/vscodium/releases/download/$VSCODIUM_VERSION/$package" -o "$PREFIX/$package"
	tar -xf "$PREFIX/$package" -C "$PREFIX/$VSCODIUM_VERSION"
	rm "$PREFIX/$package"
	echo "Installed $VSCODIUM_VERSION to $PREFIX/$VSCODIUM_VERSION/bin/codium-server" >&2
fi
EOF
}

# @cmd Print the script used to start the remote extension host.
#
# The provided command will be executed with the shell command and will receive
# a single argument containing a shell script to run on the remote end.
#
# Example: vscodium-server start --extra-args="--install-extension foo --start-server" "docker exec -i my-container bash -c"
# @option    --extra-args*                 Additional arguments to codium-server
# @option    --vscodium-version=`version`  Version to start
# @option    --prefix <DIR>                Install prefix on the remote machine
# @flag   -d --detach                      Run in background
# @flag   -v --verbose                     Increase logging
get-start-script() {
	get-install-script
	cat <<'EOF'
socket_path="${XDG_RUNTIME_DIR:-/tmp}/vscodium-server-$VSCODIUM_VERSION.sock"
if [ -S "$socket_path" ] && socat OPEN:/dev/null UNIX-CONNECT:"$socket_path" 2>/dev/null; then
	echo "Remote extension host is already running." >&2
else
	rm -f "$socket_path"
EOF
	# shellcheck disable=2016
	command='$PREFIX/$VSCODIUM_VERSION/bin/codium-server \
		--socket-path "$socket_path" \
		--without-connection-token \
		'${argc_extra_args+"${argc_extra_args[@]}"}
	if [[ "${argc_detach+1}" ]]; then
		cat <<EOF
	log="\${XDG_RUNTIME_DIR:-/tmp}/vscodium-server.log"
	nohup $command \\
		</dev/null >"\$log" 2>&1 &
	tail -f "\$log" | sed '/Extension host agent listening on/ q' >&2
	rm -f "\$log"
EOF
	else
		echo "	exec $command"
	fi
	echo 'fi'
}

# @cmd Print the script to connect to a remote extension host.
#
# The resulting script connects its stdio channels to the VSCodium server. It
# is designed to be executed from socat's EXEC directive.
# @option    --extra-args*                 Additional arguments to codium-server
# @option    --vscodium-version=`version`  Version to start
# @option    --prefix <DIR>                Install prefix on the remote machine
# @flag      --use-existing                Assume the server is already running
# @flag   -v --verbose                     Increase logging
get-connect-script() {
	if [[ ! ${argc_use_existing:+1} ]]; then
		argc_detach=1
		get-start-script
	fi
	echo "socket_path=\"\${XDG_RUNTIME_DIR:-/tmp}/vscodium-server-${argc_vscodium_version}.sock\""
	echo "echo \"Connecting to codium-server at \$socket_path...\" >&2"
	echo "exec socat - UNIX-CONNECT:\"\$socket_path\""
}

shelljoin() {
	payload=""
	for arg in "$@"; do
		payload+=\'${arg//\'/\'\\\'\'}"' "
	done
	echo "${payload% }"
}

if ! command -v argc >/dev/null; then
	echo "This command requires argc. Install from https://github.com/sigoden/argc" >&2
	exit 100
fi
eval "$(argc --argc-eval "$0" "$@")"
