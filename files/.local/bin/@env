#!/usr/bin/env bash
# @describe Spin up and access isolated development environments.
#
# Environment are defined in $XDG_CONFIG_HOME/@env/**/*.sh. Each environment is
# an Argcfile which defines subcommands to start and access the environment.
# Required subcommands:
#
# - up: start the environment. Arguments are allowed.
# - run-in-env: runs a shell command in the environment. The single argument is
#   a shell script to run.
# - stop: stop the environment. Arguments are allowed.
# - status: check the status of the environment. Should print something
#   machine-readable and exit with a success code. Arguments are allowed.
#
# Any other commands are allowed and exposed via the env-command subcommand.
set -eu

ATENV_HOME=${ATENV_HOME:-${XDG_CONFIG_HOME:-$HOME/.config}/@env}

dotfiles_root() {
	path=${BASH_SOURCE[0]}
	realpath -m "$path"/../../../..
}

ATENV_HELPER_LIB=$(dotfiles_root)/share/@env/helpers.sh
export ATENV_HELPER_LIB
# shellcheck disable=SC1090
. "$ATENV_HELPER_LIB"

_list_environments() {
	if [ -d "$ATENV_HOME" ]; then
		(cd "$ATENV_HOME" && find . -name "*.sh") | sort | while IFS= read -r file; do
			file="${file#./}"  # Remove leading "./"
			file="${file%.sh}" # Remove trailing ".sh"
			echo "$file"
		done
	fi
}

_choice_args() {
	script=$ATENV_HOME/${argc_environment:?}.sh
	args=( "${argc__positionals[@]:1:${#argc__positionals[@]}-2}" "${ARGC_LAST_ARG:-}" )
	if [[ "${argc__cmd_fn:?}" != "env-command" ]]; then
		args=("${argc__cmd_fn}" "${args[@]}")
	fi
    argc --argc-compgen generic "$script" "$script" "${args[@]}"
}

# @cmd Run an environment-defined command.
#
# To run a command inside the environment, use "exec" instead.
#
# Specify an environment to see the available commands.
# @arg       environment![`_list_environments`] Name of the environment
# @arg       args~[?`_choice_args`]             Arguments to pass forward
# @alias do
env-command() {
	script=$ATENV_HOME/${argc_environment:?}.sh
	exec argc --argc-run "$script" ${argc_args+"${argc_args[@]}"}
}

# @cmd List the available environments
list() {
	environments=()
	if [ -d "$ATENV_HOME" ]; then
		while IFS= read -r file; do
			file="${file#./}"  # Remove leading "./"
			file="${file%.sh}" # Remove trailing ".sh"
			environments+=("${file}")
		done < <(_list_environments)
	fi

	if [ "${#environments[@]}" -eq 0 ]; then
		echo "No environments configured in $ATENV_HOME" >&2
	else
		for env in "${environments[@]}"; do
			echo "$env"
		done
	fi
}

# @cmd Write the environment template.
# @arg       target! Path to write
create() {
	target="$ATENV_HOME/${argc_target:?}.sh"
	mkdir -p "$(dirname "$target")"
	cp -nv "$(dotfiles_root)/share/@env/template.sh" "$target"
	echo "$target"
}

# @cmd Edit the environment file
# @arg       environment![`_list_environments`] Name of the environment
edit() {
	cd "$ATENV_HOME"
	# shellcheck disable=SC2086
	exec command $EDITOR "${argc_environment:?}.sh"
}

# @cmd Start an environment
#
# To see environment-specific options: @env up ENVIRONMENT --help
# @arg       environment![`_list_environments`] Name of the environment
# @arg       args~[?`_choice_args`]             Arguments to pass forward
up() {
	argc_args=(up ${argc_args+"${argc_args[@]}"})
	env-command
}

# @cmd Run a shell script in the environment
# @arg       environment![`_list_environments`] Name of the environment
# @arg       args~[?`_choice_args`]             Arguments to pass forward
# @alias exec
run-in-env() {
	argc_args=(run-in-env "$(shelljoin ${argc_args+"${argc_args[@]}"})")
	env-command
}

# @cmd Stop an environment
#
# To see environment-specific options: @env stop ENVIRONMENT --help
# @arg       environment![`_list_environments`] Name of the environment
# @arg       args~[?`_choice_args`]             Arguments to pass forward
stop() {
	argc_args=(stop ${argc_args+"${argc_args[@]}"})
	env-command
}

# @cmd Check the environment is running
# @arg       environment![`_list_environments`] Name of the environment
status() {
	argc_args=(status)
	env-command
}

# @cmd Open a shell in the environment
# @arg       environment![`_list_environments`] Name of the environment
shell() {
	argc_args=(run-in-env "exec sh -c 'exec \"\$(grep \"^\$USER:\" /etc/passwd | cut -d: -f7)\"'")
	env-command
}

# @cmd Run tmux with iTerm integration in the environment
# @arg       environment![`_list_environments`] Name of the environment
# @arg       directory                          Remote directory to start in
tmux() {
	echo "Starting tmux in $argc_environment"
	cmd="exec tmux -uCC new -As0"
	if [ ${argc_directory:+1} ]; then
		cmd="cd $(shelljoin "$argc_directory") && $cmd"
	fi
	argc_args=(run-in-env "$cmd")
	env-command
}

# @cmd Run neovim in the environment
# @arg       environment![`_list_environments`] Name of the environment
# @arg       args~                              Additional args
# @option    --tmux                             Set TMUX environment variable
# @option    --chdir                            Remote directory to change into
nvim() {
	local script
	script="nvim $(shelljoin ${argc_args:+"${argc_args[@]}"})"
	if [ ${argc_tmux:+1} ]; then
		script="env TMUX=$(shelljoin "$argc_tmux") $script"
	fi
	if [ ${argc_chdir:+1} ]; then
		script="cd $(shelljoin "$argc_chdir") && direnv exec . $script"
	fi
	argc_args=(run-in-env "$script")
	env-command
}

# @cmd Start everything.
# @arg       environment![`_list_environments`] Name of the environment
# @arg       directory                          Remote directory to start in
start-working() {
	"$0" up "${argc_environment:?}"
	"$0" tmux "${argc_environment:?}" ${argc_directory:+"${argc_directory}"}
}

if ! command -v argc >/dev/null; then
	echo "This command requires argc. Install from https://github.com/sigoden/argc" >&2
	exit 100
fi
eval "$(argc --argc-eval "$0" "$@")"
