#!/usr/bin/env bash
# @describe Spin up and access isolated development environments.
#
# Environment are defined in $XDG_CONFIG_HOME/@env/**/*.sh. Each environment
# should define shell functions to start, stop, and access the environment, as
# well as specify which ports should be forwarded into the container.
#
# Environment-defined functions
# =============================
#
# `environment_up` - start the environment in response to the `up` subcommand.
# This function should be idempotent, and silently succeed if the environment
# is already running.
#
# `environment_exec` - execute a shell script in the running environment. The
# function receives a single argument containing the shell script to execute.
# If standard input is a tty, the function should allocate a tty in the
# environment.
#
# `environment_ports` - print the port forwarding configuration to use with the
# `ports` subcommand. See the "Ports DSL" section below for more information.
#
# Helper functions
# ================
#
# The following helper functions are available for use in environment files.
set -eu

ATENV_HOME=${ATENV_HOME:-${XDG_CONFIG_HOME:-$HOME/.config}/@env}

dotfiles_root() {
	path=${BASH_SOURCE[0]}
	realpath -m "$path"/../../../..
}

ATENV_HELPER_LIB=$(dotfiles_root)/share/@env/helpers.sh
export ATENV_HELPER_LIB
# shellcheck disable=SC1090
. "$ATENV_HELPER_LIB"

_list_environments() {
	if [ -d "$ATENV_HOME" ]; then
		(cd "$ATENV_HOME" && find . -name "*.sh") | sort | while IFS= read -r file; do
			file="${file#./}"  # Remove leading "./"
			file="${file%.sh}" # Remove trailing ".sh"
			echo "$file"
		done
	fi
}

_choice_args() {
	script=$ATENV_HOME/${argc_environment:?}.sh
	args=( "${argc__positionals[@]:1:${#argc__positionals[@]}-2}" "${ARGC_LAST_ARG:-}" )
	if [[ "${argc__cmd_fn:?}" != "env-command" ]]; then
		args=("${argc__cmd_fn}" "${args[@]}")
	fi
    argc --argc-compgen generic "$script" "$script" "${args[@]}"
}

# @cmd Run an environment-defined command.
#
# To run a command inside the environment, use "exec" instead.
#
# Specify an environment to see the available commands.
# @arg       environment![`_list_environments`] Name of the environment
# @arg       args~[?`_choice_args`]             Arguments to pass forward
# @alias do
env-command() {
	script=$ATENV_HOME/${argc_environment:?}.sh
	exec argc --argc-run "$script" ${argc_args+"${argc_args[@]}"}
}

# @cmd List the available environments
list() {
	environments=()
	if [ -d "$ATENV_HOME" ]; then
		while IFS= read -r file; do
			file="${file#./}"  # Remove leading "./"
			file="${file%.sh}" # Remove trailing ".sh"
			environments+=("${file}")
		done < <(_list_environments)
	fi

	if [ "${#environments[@]}" -eq 0 ]; then
		echo "No environments configured in $ATENV_HOME" >&2
	else
		for env in "${environments[@]}"; do
			echo "$env"
		done
	fi
}

# @cmd Write the environment template.
# @arg       target! Path to write
create() {
	target="$ATENV_HOME/${argc_target:?}.sh"
	mkdir -p "$(dirname "$target")"
	cp -nv "$(dotfiles_root)/share/@env/template.sh" "$target"
	echo "$target"
}

# @cmd Start an environment
#
# Specify an environment to see environment-specific options.
# @arg       environment![`_list_environments`] Name of the environment
# @arg       args~[?`_choice_args`]             Arguments to pass forward
up() {
	argc_args=(up ${argc_args+"${argc_args[@]}"})
	env-command
}

# @cmd Run a shell script in the environment
# @arg       environment![`_list_environments`] Name of the environment
# @arg       args~[?`_choice_args`]             Arguments to pass forward
# @alias exec
run-in-env() {
	argc_args=(run-in-env "$(shelljoin ${argc_args+"${argc_args[@]}"})")
	env-command
}

# @cmd Forward ports into/out of the environment.
#
# This command starts a new tmux session to run the processes.
# @arg       environment![`_list_environments`] Name of the environment
# @flag   -b --background                       Run in a background iTerm tab
# @flag      --bury                             Bury the calling iTerm session
# @flag      --dump-procfile                    Show the generated Procfile instead of running it
ports() {
	local procfile
	echo ATENV_PORT_ENV="${argc_environment:?}" "$0" env-command "${argc_environment}" ports ${argc_args+"${argc_args[@]}"}
	procfile=$(ATENV_PORT_ENV="${argc_environment:?}" "$0" env-command "${argc_environment}" ports ${argc_args+"${argc_args[@]}"})
	if [[ "${argc_dump_procfile:+1}" ]]; then
		echo "$procfile"
		return 0
	fi

	if [[ "${argc_background:+1}" ]]; then
		local args eval_str
		args=()
		if [[ "${argc_no_bury:+1}" ]]; then
			args+=(--no-bury)
		fi
		args+=("${argc_environment:?}")
		eval_str="$(shelljoin "$0") ports $(shelljoin "${args[@]}")"
		local cmd_str="$SHELL -lC \"$eval_str\""
		local cmd_str=${cmd_str//\\/\\\\}
		local cmd_str=${cmd_str//\"/\\\"}
		local script="tell application \"iTerm\" to tell current window to create tab with default profile command \"$cmd_str\""
		osascript -e "$script"
		return 0
	fi

	if [[ "${argc_bury:+1}" ]]; then
		iterm_set_buried.py 1
		trap 'iterm_set_buried.py 0' EXIT
	fi

	exec hivemind <(echo "$procfile")

}

# @cmd Open a shell in the environment
# @arg       environment![`_list_environments`] Name of the environment
shell() {
	argc_args=(run-in-env "exec sh -c 'exec \"\$(grep \"^\$USER:\" /etc/passwd | cut -d: -f7)\"'")
	env-command
}

# @cmd Run tmux with iTerm integration in the environment
# @arg       environment![`_list_environments`] Name of the environment
# @arg       directory                          Remote directory to start in
tmux() {
	cmd="tmux -uCC new -As0"
	if [ ${argc_directory:+1} ]; then
		cmd="cd $(shelljoin "$argc_directory") && $cmd"
	fi
	argc_args=(run-in-env "$cmd")
	env-command
}

# @cmd Open VSCodium in the environment
#
# The ports subcommand must already be running with vscodium enabled.
# @arg       environment![`_list_environments`] Name of the environment
# @option    --remote=remote  Name of the Remote-OSS remote
# @option    --path           Path in the remote to open
codium() {
	if [[ ${argc_path:+1} ]]; then
		path=${argc_path}
	else
		path=$($0 exec "${argc_environment:?}" pwd)
	fi
	local remote_encoded
	remote_encoded=$(echo -n "${argc_remote:?}" | xxd -ps)
	url=vscodium://vscode-remote/remote-oss+--${remote_encoded}${path}
	open "$url"
}

# @cmd Open Neovide in the environment
# @arg       environment![`_list_environments`] Name of the environment
# @arg       directory                          Remote directory to start in
neovide() {
	local embed_command
	embed_command=("$0" nvim ${argc_directory:+--chdir "$argc_directory"} "${argc_environment:?}")
	exec neovide --neovim-bin="$(shelljoin "${embed_command[@]}")"
}

# @cmd Run neovim in the environment
# @arg       environment![`_list_environments`] Name of the environment
# @arg       args~                              Additional args
# @option    --chdir                            Remote directory to change into
nvim() {
	local script
	script="nvim $(shelljoin ${argc_args:+"${argc_args[@]}"})"
	if [ ${argc_chdir:+1} ]; then
		script="cd $(shelljoin "$argc_chdir") && $script"
	fi
	argc_args=(run-in-env "$script")
	env-command
}

# @cmd Start everything.
# @arg       environment![`_list_environments`] Name of the environment
# @option    --editor[=neovide|vscodium]        Which editor to launch
start-working() {
	"$0" up "${argc_environment:?}"
	ports_log=$(mktemp /tmp/portlog-XXXX)
	"$0" ports "${argc_environment:?}" >"$ports_log" 2>&1 & ports_pid=$!
	trap 'echo "Shutting down port forwards..."; kill "$ports_pid"; wait; cat "$ports_log"' EXIT
	case "${argc_editor:?}" in
	neovide)
		"$0" neovide "${argc_environment:?}"
		;;
	vscodium)
		"$0" codium "${argc_environment:?}"
		;;
	esac
	"$0" tmux "${argc_environment:?}"
}

if ! command -v argc >/dev/null; then
	echo "This command requires argc. Install from https://github.com/sigoden/argc" >&2
	exit 100
fi
eval "$(argc --argc-eval "$0" "$@")"
