#!/usr/bin/env bash
# @describe Useful commands from my dotfiles.

set -eu

dotfiles_root() {
	path=${BASH_SOURCE[0]}
	realpath -m "$path"/../../../..
}

# @cmd Commands related to dotfiles.
dotfiles() { :; }

# @cmd Open an editor in the dotfiles directory
dotfiles::edit() {
	cd "$(dotfiles_root)"
	if command -v neovide >/dev/null; then
		neovide
	else
		$EDITOR
	fi
}

# @cmd Pull the latest version and sync.
# @flag      --bootstrap Run the bootstrap script.
dotfiles::pull() {
	cd "$(dotfiles_root)"
	git pull
	dfm link
	if [[ "${argc_bootstrap:+1}" ]]; then
		./bootstrap.sh
	fi
}

# @cmd Create a temporary docker container.
# @arg       image=buildpack-deps:noble  Base image to use
docker-sandbox() {
	container_id=$(docker run -d --rm "${argc_image:?}" sleep infinity)
	docker exec -i "$container_id" sh <<-END_SCRIPT
	apt-get update
	apt-get install -y sudo rsync
	cd ~
	git clone https://gitlab.com/CGamesPlay/dotfiles dotfiles
	cd dotfiles
	./bootstrap.sh
	END_SCRIPT
	status=0
	docker exec -it "$container_id" fish || status=$?
	docker rm -f "$container_id"
	exit "$status"
}

# @cmd Install amel
# @arg       target     Path to install to
# @meta require-tools uv
install-amel() {
	target=${argc_target:-~/amel}
	if [ ! -d "$target" ]; then
		git clone git@gitlab.com:CGamesPlay/amel-pair.git "$target"
		cd "$target"
	else
		cd "$target"
		git pull
	fi
	uv sync
	ln -sf "$target/.venv/bin/amel" ~/.local/bin/amel
}

# @cmd Instantiate templates.
create() { :; }

# @cmd Copy the devcontainer workspace root template to the named directory.
# @arg       target!        Location of the new workspace.
# @option -n --name <NAME>  Human-readable name for the workspace.
create::devcontainer() {
	template_dir="$(dotfiles_root)/share/devcontainer"
	argc_name=${argc_name:-$argc_target}
	cp -R "$template_dir" "$argc_target"
	echo "$argc_target: created"
}

# @cmd Create a sample Argcfile.
# @arg       target=Argcfile.sh            Target filename.
create::argcfile() {
	template_file="$(dotfiles_root)/share/Argcfile-template.sh"
	cp -i "$template_file" "$argc_target"
	echo "$argc_target: created"
}

# @cmd Create a CACHEDIR.TAG file in the target directory.
# https://bford.info/cachedir/
# @arg       target=. <DIR>  Target directory.
create::cachedir-tag() {
	echo "Signature: 8a477f597d28d172789f06886806bc55" > "${argc_target:?}"/CACHEDIR.TAG
	echo "${argc_target}/CACHEDIR.TAG: created"
}

# @cmd Commands for working with ruby/rails projects.
#
#   And on the pedestal, these words appear:
#   My name is Ozymandias, King of Kings;
#   Look on my Works, ye Mighty, and despair!
#   Nothing beside remains. Round the decay
#   Of that colossal Wreck, boundless and bare
#   The lone and level sands stretch far away.
rails() { :; }

# @cmd Generate offline documentation for all gems in the Gemfile
# @arg       target=doc <DIR>  Target directory.
# @flag      --rebuild         Ignore existing documentation
# @meta require-tools bundle,gem
rails::rdoc() {
	if ! gem list rdoc -i >/dev/null; then
		echo "RDoc is not installed. Installing now."
		gem install rdoc
	fi
	if ! gem list sdoc -i >/dev/null; then
		echo "SDoc is not installed. Installing now."
		gem install sdoc
	fi

	mkdir -p "${argc_target:?}"
	index_file="${argc_target:?}/index.html"

	echo "<html><head><title>Gems Documentation Index</title></head><body><h1>Gems Documentation Index</h1><ul>" > "$index_file"

	for gem_path in $(bundle list --paths); do
		gem_name=$(basename "$gem_path")
		gem_out_dir="${argc_target:?}/$gem_name"
		if [ -d "$gem_out_dir" ]; then
			echo "<li><a href='$gem_name/index.html'>$gem_name</a></li>" >> "$index_file"
		fi

		if [ -d "$gem_out_dir" ] && [ ! "${argc_rebuild:+1}" ]; then
			echo "Skipping $gem_name"
			continue
		fi

		if ! rdoc --output "$gem_out_dir" --format sdoc -T rails "$gem_path"; then
			echo "Failed to compile rdocs for $gem_name" >&2
		fi
	done

	echo "</ul></body></html>" >> "$index_file"

	echo "RDoc generation complete. Open $index_file to browse the documentation."
}

# @cmd Run Anthropic's Claude Code
# In the future, potentially look into:
# - https://github.com/boldsoftware/sketch
# - https://github.com/All-Hands-AI/OpenHands
# - https://github.com/openai/codex
# @arg args~ Passed to claude
claude() {
	unset ANTHROPIC_API_KEY
	# shellcheck disable=SC1091
	. "${NVM_DIR:?NVM_DIR is not set}/nvm.sh"
	nvm exec --lts npx --yes @anthropic-ai/claude-code@latest ${argc_args+-- "${argc_args[@]}"}
}

eval "$(argc --argc-eval "$0" "$@")"
