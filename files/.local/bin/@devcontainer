#!/usr/bin/env bash
# @describe Wrapper around @devcontainers/cli
# 
# Because that program was not designed for human use.
# @option    --workspace-folder=.         Path to workspace folder
# @meta inherit-flag-options

set -eu

DOTFILES_REPOSITORY=https://gitlab.com/CGamesPlay/dotfiles.git

# shellcheck disable=SC1091
. "${NVM_DIR:?}/nvm.sh"
set +u
if ! nvm use --lts --silent; then
	nvm use --lts
	exit 1
fi
set -u

_ensure_installed() {
	if ! command -v devcontainer >/dev/null; then
		npm install -g @devcontainers/cli >&2
	fi
}

# @cmd Start a container, creating it if necessary
# @flag      --no-dotfiles                Do not install dotfiles
# @flag      --remove-existing-container  Remove a container and recreate it
# @option    --remote-env*                Additional environment variables to set
up() {
	_ensure_installed
	args=(
		--workspace-folder="${argc_workspace_folder:?}"
		${argc_remove_existing_container+--remove-existing-container}
		"${argc_remote_env[@]/#/--remote-env=}"
	)
	if [[ ! ${argc_no_dotfiles+1} ]]; then
		args+=(--dotfiles-repository="$DOTFILES_REPOSITORY")
	fi
	devcontainer up "${args[@]}"
}

# @cmd Open a shell in the running devcontainer
shell() {
	argc_args=(sh -c "exec \"\$(getent passwd \"\$USER\" | cut -d: -f7)\"")
	run-cmd
}

# @cmd Execute a command in the running devcontainer
# @arg       args~                        Command to run
# @alias exec
run-cmd() {
	args=(--workspace-folder="${argc_workspace_folder:?}")
	while IFS='=' read -r key value; do
		case "$key" in
			TERM|LANG|LC_*|COLOR*)
				args+=("--remote-env" "$(printf '%q=%q' "$key" "$value")")
				;;
		esac
	done < <(env)
	args+=("${argc_args[@]}")
	exec devcontainer exec "${args[@]}"
}

# @cmd Show the status of the devcontainer
#
# Only considers the main container in docker compose setups.
status() {
	docker ps -a -f "$(_container_labels)" --format '{{.State}}'
}

# @cmd Stop a running devcontainer
#
# https://github.com/devcontainers/cli/issues/386
stop() {
	container_id=$(docker ps -a -f "$(_container_labels)" --format '{{.ID}}')
	compose_project=$(docker inspect "$container_id" --format '{{index .Config.Labels "com.docker.compose.project"}}')
	if [[ -n "$compose_project" ]]; then
		docker compose -p "$compose_project" stop
	elif [[ ${container_id:+1} ]]; then
		docker stop "$container_id"
	fi
}

# @cmd Remove the devcontainer
down() {
	container_id=$(docker ps -a -f "$(_container_labels)" --format '{{.ID}}')
	compose_project=$(docker inspect "$container_id" --format '{{index .Config.Labels "com.docker.compose.project"}}')
	if [[ -n "$compose_project" ]]; then
		docker compose -p "$compose_project" down --volumes
	elif [[ ${container_id:+1} ]]; then
		docker stop "$container_id"
		docker rm "$container_id"
	fi
}

_container_labels() {
	path="$(readlink -f "${argc_workspace_folder:?}")"
	echo "label=devcontainer.local_folder=$path"
}

if ! command -v argc >/dev/null; then
	echo "This command requires argc. Install from https://github.com/sigoden/argc" >&2
	exit 100
fi
eval "$(argc --argc-eval "$0" "$@")"
