#!/usr/bin/python3
from datetime import datetime, timedelta
from glob import glob
import argparse
import os
import re
import signal
import subprocess
import sys
import time

IDLE_TIMEOUT = timedelta(hours=2)
keepalive_file = f"/tmp/auto-shutdown-keepalive-{os.getpid()}"


def file_atimes(pattern):
    paths = glob(pattern)
    atime = lambda path: datetime.fromtimestamp(os.stat(path).st_atime)
    if len(paths) == 0:
        return ()
    return list((x, atime(x)) for x in paths)


def most_active_pty():
    "Returns a list of active PTYs as [(filename, datetime)]."
    return file_atimes("/dev/pts/*")


def keepalive_time():
    "Returns a [(keepalive_file, datetime)]."
    return file_atimes("/tmp/auto-shutdown-keepalive-*")


def xprintidle(user, display):
    "Return the time of last interaction for the given display, or None"
    env = os.environ.copy()
    env["DISPLAY"] = display
    # Janky but I don't want to install the getent dependency
    env["XAUTHORITY"] = (
        "/root/.Xauthority" if user == "root" else f"/home/{user}/.Xauthority"
    )
    try:
        rc = subprocess.run(
            ("xprintidle"),
            timeout=1,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            env=env,
        )
        if rc.returncode != 0:
            return None
    except subprocess.TimeoutExpired:
        # This happens when xrdp can't reach the client but it's still connected.
        return datetime.now()
    idle = int(rc.stdout.decode("utf-8"))
    return datetime.now() - timedelta(milliseconds=idle)


def x_time():
    "Return [(DISPLAY, time)]."
    ps = subprocess.check_output(("ps", "-A", "ue")).decode("utf-8")
    displays = set(
        re.findall(r"^(\w+).*(?<=\bDISPLAY=)(:\d+(?:\.\d+)?)\b", ps, flags=re.M)
    )
    return list(
        filter(
            lambda x: x[1] is not None,
            ((d[1], xprintidle(d[0], d[1])) for d in displays),
        )
    )


def touch_keepalive(value):
    if value is None:
        try:
            os.unlink(keepalive_file)
        except FileNotFoundError:
            pass
    else:
        os.utime(keepalive_file, (value.timestamp(), value.timestamp()))


def get_activity():
    activity = {}
    sources = [most_active_pty, keepalive_time, x_time]
    for source in sources:
        files = source()
        if files is None:
            continue
        for f in files:
            name, timestamp = f
            if timestamp is not None:
                activity[name] = timestamp
    return activity


def shutdown():
    subprocess.run("systemctl poweroff --when=+10m", check=True, shell=True)
    time.sleep(10 * 60)


def status(args):
    activity = get_activity()
    now = datetime.now()
    print("Last activity:")
    for key, value in activity.items():
        age = now - value
        print(f"{key:30}  {age} ago")
    overall = max((x[1] for x in activity.items()))
    shutdown_time = overall + IDLE_TIMEOUT
    print("")
    print(f"Machine will auto-shutdown at {shutdown_time} (in {shutdown_time - now})")


def daemon(args):
    # We keep a snapshot of the last activity because sources can disappear,
    # but this should not cause the timer to skip forward.
    last_activity = datetime.now()
    while True:
        last_activity = max(last_activity, *(x[1] for x in get_activity().items()))
        now = datetime.now()
        shutdown_time = last_activity + IDLE_TIMEOUT
        if now >= shutdown_time:
            shutdown()
        time.sleep(30)


def caffeinate(args):
    command = " ".join(args.COMMAND)
    process = subprocess.Popen(command, shell=True)
    signal.signal(signal.SIGINT, signal.SIG_IGN)
    signal.signal(signal.SIGQUIT, signal.SIG_IGN)
    poll_period = IDLE_TIMEOUT / 2
    while True:
        touch_keepalive(datetime.now())
        try:
            process.wait(timeout=poll_period.total_seconds())
            break
        except subprocess.TimeoutExpired:
            pass
    touch_keepalive(None)
    sys.exit(process.returncode)


parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(required=True)

parser_status = subparsers.add_parser("status")
parser_status.set_defaults(func=status)

parser_daemon = subparsers.add_parser("daemon")
parser_daemon.set_defaults(func=daemon)

parser_caffeinate = subparsers.add_parser("caffeinate")
parser_caffeinate.add_argument("COMMAND", nargs="+")
parser_caffeinate.set_defaults(func=caffeinate)

args = parser.parse_args()
args.func(args)
